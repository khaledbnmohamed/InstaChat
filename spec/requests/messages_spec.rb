# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/applications/:token/chats', elasticsearch: true, type: :request do
  # path '/api/v1/applications/:token/chats' do
  #   post "create chat" do
  #     tags 'chats'
  #     consumes 'chat/json'
  #     produces 'chat/json'

  #     parameter name: :chat, in: :body, schema: {
  #       type: :object,
  #       properties: {
  #         name: { type: :string }
  #       }
  #     }

  #     response '200', 'create chat' do
  #       it "updates chat succsfully" do
  #         post "/api/v1/chats", params: { chat: { name: "Khaled Awad chat" } }
  #         expect(response).to have_http_status(:success)
  #         expect(response.parsed_body['name']).to eq("Khaled Awad chat")
  #         expect(response.parsed_body).to include("number")
  #         expect(response.parsed_body).to include("chats_count")
  #         expect(response.parsed_body).to include("number")
  #         expect(response.parsed_body).to_not include("id")
  #       end
  #     end
  #   end
  # end

  path '/api/v1/applications/:token/chats/:number/messages' do
    put 'update chat' do
      tags 'chats'
      consumes 'chat/json'
      produces 'chat/json'

      parameter name: :chat, in: :body, schema: {
        type: :object,
        properties: {
          name: { type: :string }
        }
      }
      let(:chat) { FactoryBot.create(:chat) }

      response '200', 'create chat' do
        it 'creates chat succsfully' do
          put "/api/v1/chats/#{chat.number}", params: { chat: { name: 'edited app' } }
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['name']).to eq('edited app')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to include('chats_count')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to_not include('id')
        end
      end
    end
  end

  path '/api/v1/applications/:token/chats/:number/messages' do
    get 'search  messages' do
      tags 'messages'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :chat, in: :body, schema: {
        type: :object,
        properties: {
          name: { type: :string }
        }
      }
      FactoryBot.create_list(:message, 30)
      let(:message) { FactoryBot.create(:message, text: 'رسالة عربية') }
      Message.__elasticsearch__.refresh_index!

      response '200', 'search message' do
        it 'find message succsfully' do
          get "/api/v1/applications/#{message.chat.application.number}/chats/#{message.chat.number}/messages",
              params: { keyword: 'عربية' }
          expect(response).to have_http_status(:success)
          byebug
        end
      end
    end
  end
end
